module learn-adacore-examples/more-about-types/overloading-and-qualified-expressions

language ada

test overloading [[
package Pkg is
   function F (A : Integer) return Integer;
   function F (A : Character) return Integer;
end Pkg;
]] parse succeeds

test overloading resolve [[
package Pkg is
   type SSID is new Integer;

   function Convert (Self : SSID) return Integer;
   function Convert (Self : SSID) return String;
end Pkg;
]] parse succeeds

test overloading usage [[
with Ada.Text_IO; use Ada.Text_IO;
with Pkg;         use Pkg;

procedure Main is
   S : String := Convert (123_145_299);
   --            ^ Valid, will choose the proper Convert
begin
   Put_Line (S);
end Main;
]] parse succeeds

test qualified expression aggregate [[
package Qual_Expr is
   type Point is record
      A, B : Integer;
   end record;

   P : Point := Point'(12, 15);

   A : Integer := Integer'(12);
end Qual_Expr;
]] parse succeeds

test qualified expresssion expression [[
with Ada.Text_IO; use Ada.Text_IO;
with Pkg;         use Pkg;

procedure Main is
   S : String := Convert (123_145_299);
   --            ^ Invalid, which convert should we call?

   S2 : String := Convert (SSID'(123_145_299));
   --                     ^ We specify that the type of the expression is
   --                       SSID.

   --  We could also have declared a temporary

   I : SSID := 123_145_299;

   S3 : String := Convert (I);
begin
   Put_Line (S);
end Main;
]] parse succeeds