module learn-adacore-examples/subprograms

language ada

test function declaration [[
function Increment (I : Integer) return Integer;
--  We declare (but don't define) a function with one
--  parameter, returning an integer value
]] parse succeeds

test function definition [[
--  We define the Increment function

function Increment (I : Integer) return Integer is
begin
    return I + 1;
end Increment;
]] parse succeeds

test function parameter declaration [[
function Increment_By
  (I    : Integer := 0;
   Incr : Integer := 1) return Integer;
--                ^ Default value for parameters
]] parse succeeds

test function parameter definition [[
function Increment_By
  (I    : Integer := 0;
   Incr : Integer := 1) return Integer is
begin
   return I + Incr;
end Increment_By;
]] parse succeeds

test subprogram call [[
with Ada.Text_IO; use Ada.Text_IO;
with Increment_By;

procedure Show_Increment is
   A, B, C : Integer;
begin
   C := Increment_By;
   --              ^ Parameterless call, value of I is 0
   --                and Incr is 1

   Put_Line ("Using defaults for Increment_By is "
             & Integer'Image (C));

   A := 10;
   B := 3;
   C := Increment_By (A, B);
   --                 ^ Regular parameter passing

   Put_Line ("Increment of " & Integer'Image (A)
             & " with "      & Integer'Image (B)
             & " is "        & Integer'Image (C));

   A := 20;
   B := 5;
   C := Increment_By (I    => A,
                      Incr => B);
    --                ^ Named parameter passing

   Put_Line ("Increment of " & Integer'Image (A)
             & " with "      & Integer'Image (B)
             & " is "        & Integer'Image (C));
end Show_Increment;
]] parse succeeds

test nested subprogram [[
with Ada.Text_IO; use Ada.Text_IO;
with Increment_By;

procedure Show_Increment is
   A, B, C : Integer;

   procedure Display_Result is
   begin
      Put_Line ("Increment of " & Integer'Image (A)
                & " with "      & Integer'Image (B)
                & " is "        & Integer'Image (C));
   end Display_Result;

begin
   A := 10;
   B := 3;
   C := Increment_By (A, B);
   Display_Result;
end Show_Increment;
]] parse succeeds

test function call [[
function Quadruple (I : Integer) return Integer is
    function Double (I : Integer) return Integer is
    begin
       return I * 2;
    end Double;

   Res : Integer := Double (Double (I));
   --               ^ Calling the double function
begin
   Double (I);
   --  ERROR: cannot use call to function "Double" as a statement

   return Res;
end Quadruple;
]] parse succeeds