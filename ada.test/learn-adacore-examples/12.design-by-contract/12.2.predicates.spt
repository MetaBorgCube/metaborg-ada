module learn-adacore-examples/design-by-contract/predicates

language ada

test predicates [[
with Ada.Text_IO; use Ada.Text_IO;

procedure Show_Predicates is

   type Week is (Mon, Tue, Wed, Thu, Fri, Sat, Sun);

   subtype Work_Week is Week range Mon .. Fri;

   subtype Test_Days is Work_Week
     with Static_Predicate => Test_Days in Mon | Wed | Fri;

   type Tests_Week is array (Week) of Natural
     with Dynamic_Predicate =>
       (for all I in Tests_Week'Range =>
          (case I is
               when Test_Days => Tests_Week (I) > 0,
               when others    => Tests_Week (I) = 0));

   Num_Tests : Tests_Week :=
                 (Mon => 3, Tue => 0,
                  Wed => 4, Thu => 0,
                  Fri => 2, Sat => 0, Sun => 0);

   procedure Display_Tests (N : Tests_Week) is
   begin
      for I in Test_Days loop
         Put_Line ("# tests on " & Test_Days'Image (I)
                   & " => "      & Integer'Image (N (I)));
      end loop;
   end Display_Tests;

begin
   Display_Tests (Num_Tests);

   --  Assigning non-conformant values to individual elements of
   --  the Tests_Week type does not trigger a predicate check:
   Num_Tests (Tue) := 2;

   --  However, assignments with the "complete" Tests_Week type
   --  trigger a predicate check. For example:
   --
   --  Num_Tests := (others => 0);

   --  Also, calling any subprogram with parameters of Tests_Week
   --  type triggers a predicate check.
   --  Therefore, the following line will fail:
   Display_Tests (Num_Tests);
end Show_Predicates;
]] parse succeeds

test dynamic predicates [[
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
with Ada.Calendar;          use Ada.Calendar;
with Ada.Containers.Vectors;

procedure Show_Dynamic_Predicate_Courses is

   package Courses is
      type Course_Container is private;

      type Course is record
         Name       : Unbounded_String;
         Start_Date : Time;
         End_Date   : Time;
      end record
        with Dynamic_Predicate => Course.Start_Date <= Course.End_Date;

      procedure Add (CC : in out Course_Container; C : Course);
   private
      package Course_Vectors is new Ada.Containers.Vectors
        (Index_Type   => Natural,
         Element_Type => Course);

      type Course_Container is record
         V : Course_Vectors.Vector;
      end record;
   end Courses;

   package body Courses is
      procedure Add (CC : in out Course_Container; C : Course) is
      begin
         CC.V.Append (C);
      end Add;
   end Courses;

   use Courses;

   CC : Course_Container;
begin
   Add (CC,
        Course'(
          Name       => To_Unbounded_String ("Intro to Photography"),
          Start_Date => Time_Of (2018, 5, 1),
          End_Date   => Time_Of (2018, 5, 10)));

   --  This should trigger an error in the dynamic predicate check
   Add (CC,
        Course'(
          Name       => To_Unbounded_String ("Intro to Video Recording"),
          Start_Date => Time_Of (2019, 5, 1),
          End_Date   => Time_Of (2018, 5, 10)));

end Show_Dynamic_Predicate_Courses;
]] parse succeeds